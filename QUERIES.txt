
CREATE DATABASE ecommerce;
USE ecommerce;
Database changed

CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100),email VARCHAR(100),address VARCHAR(255));
describe customers;
+---------+--------------+------+-----+---------+----------------+
| Field   | Type         | Null | Key | Default | Extra          |
+---------+--------------+------+-----+---------+----------------+
| id      | int          | NO   | PRI | NULL    | auto_increment |
| name    | varchar(100) | YES  |     | NULL    |                |
| email   | varchar(100) | YES  |     | NULL    |                |
| address | varchar(255) | YES  |     | NULL    |                |
+---------+--------------+------+-----+---------+----------------+
INSERT INTO customers (name, email, address) VALUES('Alice', 'alice@example.com', 'banglore'),('Bob', 'bob@example.com', 'madurai'),('Charlie', 'charlie@example.com', 'chennai');
Query OK, 3 rows affected (0.10 sec)
Records: 3  Duplicates: 0  Warnings: 0
select * from customers;
+----+---------+---------------------+----------+
| id | name    | email               | address  |
+----+---------+---------------------+----------+
|  1 | Alice   | alice@example.com   | banglore |
|  2 | Bob     | bob@example.com     | madurai  |
|  3 | Charlie | charlie@example.com | chennai  |
+----+---------+---------------------+----------+

 CREATE TABLE products (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100),price DECIMAL(10, 2),description TEXT);
 +-------------+---------------+------+-----+---------+----------------+
| Field       | Type          | Null | Key | Default | Extra          |
+-------------+---------------+------+-----+---------+----------------+
| id          | int           | NO   | PRI | NULL    | auto_increment |
| name        | varchar(100)  | YES  |     | NULL    |                |
| price       | decimal(10,2) | YES  |     | NULL    |                |
| description | text          | YES  |     | NULL    |                |
+-------------+---------------+------+-----+---------+----------------+
INSERT INTO products (name, price, description) VALUES('Product A', 25.00, 'Description A'),('Product B', 30.00, 'Description B'),('Product C', 40.00, 'Description C'),('Product D', 100.00, 'Description D');
select * from products;
+----+-----------+--------+---------------+
| id | name      | price  | description   |
+----+-----------+--------+---------------+
|  1 | Product A |  25.00 | Description A |
|  2 | Product B |  30.00 | Description B |
|  3 | Product C |  40.00 | Description C |
|  4 | Product D | 100.00 | Description D |
+----+-----------+--------+---------------+

CREATE TABLE orders (id INT AUTO_INCREMENT PRIMARY KEY,customer_id INT,order_date DATE,total_amount DECIMAL(10, 2),FOREIGN KEY (customer_id) REFERENCES customers(id));
 describe orders;
+--------------+---------------+------+-----+---------+----------------+
| Field        | Type          | Null | Key | Default | Extra          |
+--------------+---------------+------+-----+---------+----------------+
| id           | int           | NO   | PRI | NULL    | auto_increment |
| customer_id  | int           | YES  | MUL | NULL    |                |
| order_date   | date          | YES  |     | NULL    |                |
| total_amount | decimal(10,2) | YES  |     | NULL    |                |
+--------------+---------------+------+-----+---------+----------------+
INSERT INTO orders (customer_id, order_date, total_amount) VALUES(1, CURDATE() - INTERVAL 5 DAY, 55.00),(2, CURDATE() - INTERVAL 40 DAY, 100.00),(1, CURDATE() - INTERVAL 10 DAY, 75.00),(3, CURDATE() - INTERVAL 2 DAY, 160.00);
select * from orders;
+----+-------------+------------+--------------+
| id | customer_id | order_date | total_amount |
+----+-------------+------------+--------------+
|  1 |           1 | 2025-05-06 |        55.00 |
|  2 |           2 | 2025-04-01 |       100.00 |
|  3 |           1 | 2025-05-01 |        75.00 |
|  4 |           3 | 2025-05-09 |       160.00 |
+----+-------------+------------+--------------+

1. Retrieve all customers who have placed an order in the last 30 days.

 SELECT DISTINCT c.* FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;
+----+---------+---------------------+----------+
| id | name    | email               | address  |
+----+---------+---------------------+----------+
|  1 | Alice   | alice@example.com   | banglore |
|  3 | Charlie | charlie@example.com | chennai  |
+----+---------+---------------------+----------+

2. Get the total amount of all orders placed by each customer.

 SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.id;
+---------+-------------+
| name    | total_spent |
+---------+-------------+
| Alice   |      130.00 |
| Bob     |      100.00 |
| Charlie |      160.00 |
+---------+-------------+

3. Update the price of Product C to 45.00.

UPDATE products SET price = 45.00 WHERE name = 'Product C';
 select * from products;
+----+-----------+--------+---------------+
| id | name      | price  | description   |
+----+-----------+--------+---------------+
|  1 | Product A |  25.00 | Description A |
|  2 | Product B |  30.00 | Description B |
|  3 | Product C |  45.00 | Description C |
|  4 | Product D | 100.00 | Description D |
+----+-----------+--------+---------------+

4. Add a new column discount to the products table.

 ALTER TABLE products ADD discount DECIMAL(5, 2);

 select * from products;
+----+-----------+--------+---------------+----------+
| id | name      | price  | description   | discount |
+----+-----------+--------+---------------+----------+
|  1 | Product A |  25.00 | Description A |     NULL |
|  2 | Product B |  30.00 | Description B |     NULL |
|  3 | Product C |  55.00 | Description C |     NULL |
|  4 | Product D | 100.00 | Description D |     NULL |
+----+-----------+--------+---------------+----------+

5. Retrieve the top 3 products with the highest price.

SELECT * FROM products ORDER BY price DESC LIMIT 3;
+----+-----------+--------+---------------+----------+
| id | name      | price  | description   | discount |
+----+-----------+--------+---------------+----------+
|  4 | Product D | 100.00 | Description D |     NULL |
|  3 | Product C |  55.00 | Description C |     NULL |
|  2 | Product B |  30.00 | Description B |     NULL |

6.Get the names of customers who have ordered Product A.

 SELECT DISTINCT c.name FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id WHERE p.name = 'Product A';
+---------+
| name    |
+---------+
| Alice   |
| Charlie |
+---------+

7. Join the orders and customers tables to retrieve the customer's name and order date for each order.

 SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.id = o.customer_id;
+---------+------------+
| name    | order_date |
+---------+------------+
| Alice   | 2025-05-06 |
| Alice   | 2025-05-01 |
| Bob     | 2025-04-01 |
| Charlie | 2025-05-09 |
+---------+------------+

8. Retrieve the orders with a total amount greater than 150.00.

SELECT * FROM orders WHERE total_amount > 150.00;
+----+-------------+------------+--------------+
| id | customer_id | order_date | total_amount |
+----+-------------+------------+--------------+
|  4 |           3 | 2025-05-09 |       160.00 |
+----+-------------+------------+--------------+

9. Normalize the database by creating a separate table for order items and updating the orders table to reference the order items table.

CREATE TABLE order_items (id INT AUTO_INCREMENT PRIMARY KEY,order_id INT,product_id INT,quantity INT,FOREIGN KEY (order_id) REFERENCES orders(id),FOREIGN KEY (product_id) REFERENCES products(id));

INSERT INTO order_items (order_id, product_id, quantity) VALUES(1, 1, 1),(2, 2, 2),(3, 3, 1),(4, 1, 3);
SELECT * FROM order_items;
+----+----------+------------+----------+
| id | order_id | product_id | quantity |
+----+----------+------------+----------+
|  1 |        1 |          1 |        1 |
|  2 |        2 |          2 |        2 |
|  3 |        3 |          3 |        1 |
|  4 |        4 |          1 |        3 |
+----+----------+------------+----------+

10. Retrieve the average total of all orders.

SELECT AVG(total_amount) AS avg_order_total FROM orders;
+-----------------+
| avg_order_total |
+-----------------+
|       97.500000 |
+-----------------+
